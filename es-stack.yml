version: '3.8'

services:
  # coordination:
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
  #   healthcheck:
  #     test: curl -fs http://localhost:9200/_cat/health || exit 1
  #     interval: 30s
  #     timeout: 5s
  #     retries: 3
  #     start_period: 45s
  #   configs:
  #     - source: es-coordination
  #       target: /usr/share/elasticsearch/config/elasticsearch.yml
  #     - source: jvm-options-coordination
  #       target: /usr/share/elasticsearch/config/jvm.options
  #   networks:
  #     - esnet
  #   ports:
  #     - target: 9200
  #       published: 9200
  #       protocol: tcp
  #       mode: host
  #   deploy:
  #     endpoint_mode: dnsrr
  #     mode: "replicated"
  #     replicas: 2
  #     resources:
  #       limits:
  #         memory: 1G

  master1:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    healthcheck:
      test: curl -fs http://localhost:9200/_cat/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 45s
    configs:
      - source: es-master1
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: jvm-options-master
        target: /usr/share/elasticsearch/config/jvm.options
    networks:
      - esnet
    volumes:
      - esmaster1:/usr/share/elasticsearch/data
    deploy:
      placement:
        constraints: [ node.hostname == docker1.domain.local ]
      endpoint_mode: dnsrr
      mode: "replicated"
      replicas: 1
      resources:
        limits:
          memory: 1G

  master2:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    healthcheck:
      test: curl -fs http://localhost:9200/_cat/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 45s
    configs:
      - source: es-master2
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: jvm-options-master
        target: /usr/share/elasticsearch/config/jvm.options
    networks:
      - esnet
    volumes:
      - esmaster2:/usr/share/elasticsearch/data
    deploy:
      placement:
        constraints: [ node.hostname == docker2.domain.local ]
      endpoint_mode: dnsrr
      mode: "replicated"
      replicas: 1
      resources:
        limits:
          memory: 1G

  master3:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    healthcheck:
      test: curl -fs http://localhost:9200/_cat/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 45s
    configs:
      - source: es-master3
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: jvm-options-master
        target: /usr/share/elasticsearch/config/jvm.options
    networks:
      - esnet
    volumes:
      - esmaster3:/usr/share/elasticsearch/data
    deploy:
      placement:
        constraints: [ node.hostname == docker3.domain.local ]
      endpoint_mode: dnsrr
      mode: "replicated"
      replicas: 1
      resources:
        limits:
          memory: 1G

  data1:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    healthcheck:
      test: curl -fs http://localhost:9200/_cat/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 45s
    configs:
      - source: es-data1
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: jvm-options-data
        target: /usr/share/elasticsearch/config/jvm.options
    networks:
      - esnet
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    deploy:
      placement:
        constraints: [ node.hostname == docker1.domain.local ]
      endpoint_mode: dnsrr
      mode: "replicated"
      replicas: 1
      resources:
        limits:
          memory: 1G
  data2:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    healthcheck:
      test: curl -fs http://localhost:9200/_cat/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 45s
    configs:
      - source: es-data2
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: jvm-options-data
        target: /usr/share/elasticsearch/config/jvm.options
    networks:
      - esnet
    volumes:
      - esdata2:/usr/share/elasticsearch/data
    deploy:
      placement:
        constraints: [ node.hostname == docker2.domain.local ]
      endpoint_mode: dnsrr
      mode: "replicated"
      replicas: 1
      resources:
        limits:
          memory: 1G
  data3:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    healthcheck:
      test: curl -fs http://localhost:9200/_cat/health || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 45s
    configs:
      - source: es-data3
        target: /usr/share/elasticsearch/config/elasticsearch.yml
      - source: jvm-options-data
        target: /usr/share/elasticsearch/config/jvm.options
    networks:
      - esnet
    volumes:
      - esdata3:/usr/share/elasticsearch/data
    deploy:
      placement:
        constraints: [ node.hostname == docker3.domain.local ]
      endpoint_mode: dnsrr
      mode: "replicated"
      replicas: 1
      resources:
        limits:
          memory: 1G

  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.10.0
  #   environment:
  #     - "ELASTICSEARCH_URL=http://data1:9200"
  #   networks:
  #     - esnet
  #     - proxy
  #   deploy:
  #     labels:
  #       - "traefik.port=5601"
  #       - "traefik.docker.network=proxy"
  #       - "traefik.frontend.rule=Host:kibana.domain.local"
  #     mode: replicated
  #     replicas: 1
  #     update_config:
  #       failure_action: rollback
  #       parallelism: 1
  #       delay: 10s
  #     restart_policy:
  #       condition: on-failure
  #       delay: 10s
  #       max_attempts: 3

  visualizer:
    image: dockersamples/visualizer
    ports:
      - "8081:8080"
    stop_grace_period: 1m30s
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]

  # traefik:
  #   image: traefik:latest
  #   ports:
  #     - "80:80"
  #     - "8080:8080"
  #     - "443:443"
  #   networks:
  #     - proxy
  #   command:
  #     - --api
  #     - --docker
  #     - --docker.swarmmode
  #     - --docker.watch
  #     - --entrypoints=Name:http Address::80 Redirect.EntryPoint:https
  #     - --entrypoints=Name:https Address::443 TLS
  #     - --defaultentrypoints=http,https
  #     - --metrics
  #     - --metrics.prometheus
  #     - --acme
  #     - --acme.email=admin@domain.local
  #     - --acme.storage=/certificates/acme.json
  #     - --acme.entryPoint=https
  #     - --acme.httpChallenge.entryPoint=http
  #     - --acme.onhostrule=true
  #     - --acme.acmelogging=true
  #     - --logLevel=INFO
  #     - --accessLog
  #   deploy:
  #     placement:
  #       constraints: [ node.hostname == docker1.domain.local ]
  #     mode: replicated
  #     replicas: 1
  #     restart_policy:
  #       condition: on-failure
  #     labels:
  #       - "traefik.docker.network=proxy"
  #       - "traefik.port=8080"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #     - "traefik-certificates:/certificates"

networks:
  esnet:
    driver: overlay
    attachable: true
    name: esnet
  proxy:
    driver: overlay
    name: proxy

volumes:
  esmaster1:
  esmaster2:
  esmaster3:

  esdata1:
  esdata2:
  esdata3:
  traefik-certificates:

configs:
  es-coordination:
    name: es-coordination
    file: swarm/es-coordination.yml
  es-master1:
    name: es-master1
    file: swarm/es-master1.yml
  es-master2:
    name: es-master2
    file: swarm/es-master2.yml
  es-master3:
    name: es-master3
    file: swarm/es-master3.yml

  es-data1:
    name: es-data1
    file: swarm/es-data1.yml
  es-data2:
    name: es-data2
    file: swarm/es-data2.yml
  es-data3:
    name: es-data3
    file: swarm/es-data3.yml

  jvm-options-coordination:
    name: jvm-options-coordination
    file: swarm/jvm.coordination.options
  jvm-options-data:
    name: jvm-options-data 
    file: swarm/jvm.data.options
  jvm-options-master:
    name: jvm-options-master
    file: swarm/jvm.master.options